df_history <- his_mobility(input$select_city, input$select_direct) %>%
filter(date >= daterange[1] & date <= daterange[15]) %>%
mutate(date = format(date, format = '%Y%m%d'))
df_history <- his_mobility(110000, 'move_out') %>%
filter(date >= daterange[1] & date <= daterange[15]) %>%
mutate(date = format(date, format = '%Y%m%d'))
df_combind <- df_mobility %>%
full_join(df_history, by = c('date' = 'date'))
View(df_combind)
runApp('test')
adcode <- read.xlsx('data/id.xlsx', sheet = "Sheet1", colNames = F)
pccode <- read.xlsx('data/id.xlsx', sheet = "Sheet2", colNames = F)
names(adcode) <- c('id', 'name', 'code')
names(pccode) <- c('name', 'code')
runApp('test')
mobility_get <- function(area_id, direction, date_input){
if(area_id %in% c(110000, 310000, 500000, 120000)){
class_name <- "province"
} else {
class_name <- "city"
}
url <- paste0(
'http://huiyan.baidu.com/migration/cityrank.jsonp?dt=', class_name,
'&id=', area_id,
"&type=", direction,
"&date=", date_input
)
huiyan_df <- fromJSON(
paste(readLines(url,warn = F, encoding = 'unicode'), collapse = "") %>%
str_remove("cb") %>%
str_remove_all("\\(|\\)")
)
huiyan_df <- huiyan_df$data$list
huiyan_df$date <- date_input
# huiyan_df$city <- area_id
return(huiyan_df)
}
mobility_date <- function(area_id, direction, daterange){
huiyan_combind <- lapply(daterange, mobility_get,
area_id = area_id,
direction = direction)
huiyan_ln <- do.call('rbind', huiyan_combind)
return(huiyan_ln)
}
## 历史数据
his_mobility <- function(area_id, direction){
if(area_id %in% c(110000, 310000, 500000, 120000)){
class_name <- "province"
} else {
class_name <- "city"
}
url <- paste0(
"https://huiyan.baidu.com/migration/historycurve.jsonp?dt=", class_name,
"&id=", area_id,
"&type=", direction
)
huiyan_ln <- fromJSON(
paste(readLines(url,warn = F, encoding = 'unicode'), collapse = "") %>%
str_remove("cb") %>%
str_remove_all("\\(|\\)")
)
huiyan_ln <- data.frame(
date = as.Date(names(huiyan_ln$data$list), format = '%Y%m%d'),
value = as.numeric(huiyan_ln$data$list)
)
# huiyan_ln$city <- area_id
return(huiyan_ln)
}
runApp('test')
daterange <-
seq.Date(from = as.Date('2021/10/15'), to = Sys.Date() -2 , by = 'day')
df_mobility <- mobility_date(110000, 'move_in', format(daterange, format = '%Y%m%d')) %>%
mutate(value = value / 100)
df_history <- his_mobility(110000, 'move_out') %>%
filter(date >= daterange[1] & date <= date_range[15]) %>%
mutate(date = format(date, format = '%Y%m%d'))
df_history <- his_mobility(110000, 'move_out') %>%
filter(date >= daterange[1] & date <= daterange[15]) %>%
mutate(date = format(date, format = '%Y%m%d'))
df_combind <- df_mobility %>%
full_join(df_history, by = c('date' = 'date')) %>%
group_by(date)
View(df_combind)
df_combind <- df_mobility %>%
full_join(df_history, by = c('date' = 'date')) %>%
group_by(date) %>%
mutate(value = value.x * value.y,
percent = value/sum(value)) %>%
ungroup()
df_combind <- df_mobility %>%
full_join(df_history, by = c('date' = 'date')) %>%
group_by(date) %>%
mutate(value = value.x * value.y,
percent = value/sum(value)) %>%
ungroup() %>%
select(!c(value.x, value.y, value))
df_combind <- df_mobility %>%
full_join(df_history, by = c('date' = 'date')) %>%
group_by(date) %>%
mutate(value = value.x * value.y,
percent = value/sum(value)) %>%
ungroup() %>%
select(!c(value.x, value.y, value)) %>%
pivot_wider(names_from = date, values_from = percent)
df_combind <- df_mobility %>%
full_join(df_history, by = c('date' = 'date')) %>%
group_by(date) %>%
mutate(value = value.x * value.y,
percent = value/sum(value)) %>%
ungroup() %>%
select(!c(value.x, value.y, value)) %>%
pivot_wider(names_from = date, values_from = percent) %>%
mutate(rowSums(.[-1:2]))
df_combind <- df_mobility %>%
full_join(df_history, by = c('date' = 'date')) %>%
group_by(date) %>%
mutate(value = value.x * value.y,
percent = value/sum(value)) %>%
ungroup() %>%
select(!c(value.x, value.y, value)) %>%
pivot_wider(names_from = date, values_from = percent) %>%
mutate(rowSums(.[-c(1:2)]))
df_combind <- df_mobility %>%
full_join(df_history, by = c('date' = 'date')) %>%
group_by(date) %>%
mutate(value = value.x * value.y,
percent = value/sum(value)) %>%
ungroup() %>%
select(!c(value.x, value.y, value)) %>%
pivot_wider(names_from = date, values_from = percent) %>%
mutate(sum = rowSums(.[-c(1:2)]))
df_combind <- df_mobility %>%
full_join(df_history, by = c('date' = 'date')) %>%
group_by(date) %>%
mutate(value = value.x * value.y,
percent = value/sum(value)) %>%
ungroup() %>%
select(!c(value.x, value.y, value)) %>%
pivot_wider(names_from = date, values_from = percent) %>%
mutate(sum = rowSums(.[-c(1:2)]),
percent = sum/sum(sum))
df_combind <- df_mobility %>%
full_join(df_history, by = c('date' = 'date')) %>%
group_by(date) %>%
mutate(value = value.x * value.y,
percent = value/sum(value)) %>%
ungroup() %>%
select(!c(value.x, value.y, value)) %>%
pivot_wider(names_from = date, values_from = percent) %>%
mutate(total = rowSums(.[-c(1:2)]),
percent = total/sum(total))
df_combind <- df_mobility %>%
full_join(df_history, by = c('date' = 'date')) %>%
group_by(date) %>%
mutate(value = value.x * value.y,
percent = value/sum(value)) %>%
ungroup() %>%
select(!c(value.x, value.y, value)) %>%
pivot_wider(names_from = date, values_from = percent) %>%
mutate(total = rowSums(.[-c(1:2)]),
percent = sum(total))
df_combind <- df_mobility %>%
full_join(df_history, by = c('date' = 'date')) %>%
group_by(date) %>%
mutate(value = value.x * value.y,
percent = value/sum(value)) %>%
ungroup() %>%
select(!c(value.x, value.y, value)) %>%
pivot_wider(names_from = date, values_from = percent) %>%
mutate(total = rowSums(.[-c(1:2)])) %>%
mutate(percent = sum(total))
sum(df_combind$total)
class(df_combind$total)
df_combind$total
sum(df_combind$total, na.rm = T)
df_combind <- df_mobility %>%
full_join(df_history, by = c('date' = 'date')) %>%
group_by(date) %>%
mutate(value = value.x * value.y,
percent = value/sum(value)) %>%
ungroup() %>%
select(!c(value.x, value.y, value)) %>%
pivot_wider(names_from = date, values_from = percent) %>%
mutate(total = rowSums(.[-c(1:2)]),
total_per = total/sum(total, na.rm = T))
runApp('test')
mobility_get <- function(area_id, direction, date_input){
if(area_id %in% c(110000, 310000, 500000, 120000)){
class_name <- "province"
} else {
class_name <- "city"
}
url <- paste0(
'http://huiyan.baidu.com/migration/cityrank.jsonp?dt=', class_name,
'&id=', area_id,
"&type=", direction,
"&date=", date_input
)
huiyan_df <- fromJSON(
paste(readLines(url,warn = F, encoding = 'unicode'), collapse = "") %>%
str_remove("cb") %>%
str_remove_all("\\(|\\)")
)
huiyan_df <- huiyan_df$data$list
huiyan_df$date <- date_input
# huiyan_df$city <- area_id
return(huiyan_df)
}
mobility_date <- function(area_id, direction, daterange){
huiyan_combind <- lapply(daterange, mobility_get,
area_id = area_id,
direction = direction)
huiyan_ln <- do.call('rbind', huiyan_combind)
return(huiyan_ln)
}
## 历史数据
his_mobility <- function(area_id, direction){
if(area_id %in% c(110000, 310000, 500000, 120000)){
class_name <- "province"
} else {
class_name <- "city"
}
url <- paste0(
"https://huiyan.baidu.com/migration/historycurve.jsonp?dt=", class_name,
"&id=", area_id,
"&type=", direction
)
huiyan_ln <- fromJSON(
paste(readLines(url,warn = F, encoding = 'unicode'), collapse = "") %>%
str_remove("cb") %>%
str_remove_all("\\(|\\)")
)
huiyan_ln <- data.frame(
date = as.Date(names(huiyan_ln$data$list), format = '%Y%m%d'),
value = as.numeric(huiyan_ln$data$list)
)
# huiyan_ln$city <- area_id
return(huiyan_ln)
}
adcode <- read.xlsx('data/id.xlsx', sheet = "Sheet1", colNames = F)
pccode <- read.xlsx('data/id.xlsx', sheet = "Sheet2", colNames = F)
names(adcode) <- c('id', 'name', 'code')
names(pccode) <- c('name', 'code')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
library(plotly)
head(adcode, 10)
head(adcode, 30)
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp()
runApp()
runApp()
runApp()
runApp('test')
source('function/baidu.R')
runApp()
runApp('test')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(adcode)
adcode[code == 110000,2]
adcode["code" == 110000,2]
adcode["code" == 110000,]
adcode[,"code" == 110000]
adcode[adcode$code == 110000,2]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
map_data$NAME
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(jsonlite)
library(tidyverse)
library(openxlsx)
library(plotly)
library(shiny)
library(shinyWidgets)
library(shinythemes)
library(rhandsontable)
library(geosphere)
library(sf)
library(ggspatial)
library(RColorBrewer)
runApp()
library(jsonlite)
library(tidyverse)
library(openxlsx)
library(plotly)
library(shiny)
library(shinyWidgets)
library(shinythemes)
library(rhandsontable)
library(geosphere)
library(sf)
library(ggspatial)
library(RColorBrewer)
source('function/baidu.R')
source('function/gaode.R')
source('function/connection.R')
adcode <- read.xlsx('data/id.xlsx', sheet = "Sheet1", colNames = F)
pccode <- read.xlsx('data/id.xlsx', sheet = "Sheet2", colNames = F)
names(adcode) <- c('id', 'name', 'code')
names(pccode) <- c('name', 'code')
## 省界
map_data<-st_read("data/province/province.shp")[,c('NAME', 'geometry')]
## 国界
border_data<-st_read("data/province/border.shp")[,c('geometry')]
runApp()
runApp()
runApp()
gc()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# DF <- hot_to_r(input$datatable)
# print(DF)
DF <- data.frame(
地图省份 = map_data$NAME,
数量 = sample(x = 1:50, size = 34, replace = TRUE)
)
View(DF)
names(DF) <- c('NAME', 'value')
print(DF$value)
if(length(unique(DF$value)) < 5){
DF$value <- cut(DF$value, breaks = unique(DF$value))
} else {
DF$value <- cut(DF$value, breaks = 5)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(adcode)
adcode[,'id']
runApp()
runApp()
runApp()
runApp()
runApp()
address <- '兴安盟 '
url <- paste0(
"https://restapi.amap.com/v3/geocode/geo?address=", address,
"&output=JSON&key=", '11eb5fc7a625d45cf34172a043eda0c3'
)
temp_geo <- jsonlite::fromJSON(paste(readLines(url,warn = F, encoding = 'UTF-8'), collapse = ""))
status <- temp_geo$status
View(temp_geo)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
library(jsonlite)
library(tidyverse)
library(openxlsx)
library(plotly)
library(shiny)
library(shinyWidgets)
library(shinythemes)
library(rhandsontable)
library(shinydashboard)
library(geosphere)
library(sf)
# library(ggspatial)
library(RColorBrewer)
source('function/baidu.R')
# source('function/gaode.R')
source('function/connection.R')
load('data/source.RData')
# adcode <- read.xlsx('data/id.xlsx', sheet = "Sheet1", colNames = F)
# pccode <- read.xlsx('data/id.xlsx', sheet = "Sheet2", colNames = F)
# names(adcode) <- c('id', 'name', 'code')
# names(pccode) <- c('name', 'code')
#
#
# ## 省界
# map_data<-st_read("data/province/province.shp")[,c('NAME', 'geometry')]
# ## 国界
# border_data<-st_read("data/province/border.shp")[,c('geometry')]
runApp()
.libPaths()
.libPaths("/home/epyc/R/x86_64-pc-linux-gnu-library/4.1")
shiny::runApp()
install.packages('plotly')
runApp()
install.packages('geosphere')
runApp()
load('data/source.RData')
View(adcode)
adcode$code <- as.character(adcode$code)
shiny::runApp()
load('data/source.RData')
load('data/source.RData')
adcode$code <- as.character(adcode$code)
save.image('data/source.RData')
runApp()
load('data/source.RData')
adcode$code <- as.numeric(adcode$code)
save.image('data/source.RData')
runApp()
load('data/source.RData')
runApp()
View(mobility_get)
View(mobility_get)
runApp()
runApp()
runApp()
as.numeric(5e+05)
as.character(5e+05)
as.integer(5e+5)
runApp()
