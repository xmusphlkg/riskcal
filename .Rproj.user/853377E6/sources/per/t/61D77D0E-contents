library(shiny)
library(shinyWidgets)
library(plotly)

ui <- fluidPage(
    pickerInput(
        inputId = "select_province", 
        label = "省份",
        width = NULL, 
        options = list(
            style = "btn-success",
            size = 10
        ),
        multiple = FALSE,
        choices = pccode$name,
        selected = '北京'
    ),
    pickerInput(
        inputId = "select_city", 
        label = "城市",
        width = NULL, 
        options = list(
            style = "btn-success"
        ),
        multiple = FALSE,
        choices = NULL
    ),
    pickerInput(
        inputId = "select_direct", 
        label = "方向",
        width = NULL, 
        options = list(
            style = "btn-success"
        ),
        multiple = FALSE,
        choices = c("迁入" = "move_in", "迁出" = "move_out")
    ),
    dateRangeInput(
        inputId = "select_date",
        label = "查询日期",
        start = Sys.Date()-30,
        end = Sys.Date()-2,
        format = "yyyy/mm/dd"
    ),
    actionButton(
        inputId = "confirmed",
        label = "开始",
        icon = icon("start")
    ),
    plotlyOutput(outputId = 'risk_plot', height = '600px', width = '50%')
)

server <- function(input, output, session) {
    
    df_combind <- NULL

    makeReactiveBinding('df_combind')
    
    observeEvent(input$select_province, {
        inputcode <- as.numeric(pccode[pccode$name == input$select_province,2])
        code <- adcode %>%
            filter(code >= inputcode*10^4 & code < (inputcode + 1)*10^4)
        city_select <- code[,3]
        eval(substitute(names(x)<-code[,2], list(x=as.symbol("city_select"))))
        updatePickerInput(
            session = session,
            inputId = "select_city",
            label = "城市",
            options = list(
                style = "btn-success",
                title = "请选择城市",
                size = 10
            ),
            choices = city_select,
            selected = city_select[1]
        )
    })
    
    observeEvent(input$confirmed, {
        date_range <- seq.Date(from = input$select_date[1], to = input$select_date[2], by = 'day')
        
        
        df_mobility <- mobility_date(input$select_city, input$select_direct, format(date_range, format = '%Y%m%d')) %>% 
            mutate(value = value / 100)
        
        
        if(length(date_range) != 1){
            df_history <- his_mobility(input$select_city, input$select_direct) %>% 
                filter(date >= date_range[1] & date <= date_range[2]) %>% 
                mutate(date = format(date, format = '%Y%m%d'))
        } else {
            df_history <- his_mobility(input$select_city, input$select_direct) %>% 
                filter(date == date_range) %>% 
                mutate(date = format(date, format = '%Y%m%d'))
        }
        
        # print(df_history)
        df_combind <- df_mobility %>% 
            full_join(df_history, by = c('date' = 'date')) %>% 
            group_by(date) %>% 
            mutate(value = value.x * value.y,
                   percent = value/sum(value, na.rm = T)) %>%
            ungroup() %>% 
            select(!c(value.x, value.y, value)) %>% 
            pivot_wider(names_from = date, values_from = percent) %>% 
            mutate(total = rowSums(.[-c(1:2)], na.rm = T),
                   total_per = total/sum(total, na.rm = T)) %>% 
            select(city_name, province_name, total_per) %>% 
            arrange(desc(total_per)) %>% 
            head(30)
        
        df_combind$city_name <- factor(df_combind$city_name, 
                                       levels = unique(df_combind$city_name)[order(df_combind$total_per, decreasing = F)])
        output$risk_plot <- renderPlotly({
            fig <- plot_ly(
                df_combind, y= ~city_name, x = ~total_per*100, type = 'bar', orientation = 'h'
                ) %>% 
                layout(
                    xaxis = list(title = '溢出风险(%)', showline= T, linewidth=2, linecolor='black'), 
                    yaxis = list(title ="", showline= T, linewidth=2, linecolor='black')
                    )
            fig
        })

    })
    
    
    
}

shinyApp(ui, server)