function(input, output, session) {
  
  df_combind <- NULL
  
  makeReactiveBinding('df_combind')
  
  output$datatable <- renderRHandsontable({
    DF <- data.frame(
      地图省份 = map_data$NAME,
      数量 = sample(x = 1:50, size = 34, replace = TRUE)
    )
    rhandsontable(DF, language = 'zh-CN', rowHeaderWidth = 50) %>% 
      hot_cols(colWidths = 100) %>% 
      hot_context_menu(allowColEdit = FALSE, allowRowEdit = TRUE) %>% 
      hot_context_menu(allowRowEdit = FALSE, allowColEdit = FALSE)
  })
  
  observeEvent(input$select_province, {
    inputcode <- as.numeric(pccode[pccode$name == input$select_province,2])
    code <- adcode %>%
      filter(code >= inputcode*10^4 & code < (inputcode + 1)*10^4)
    city_select <- code[,3]
    eval(substitute(names(x)<-code[,2], list(x=as.symbol("city_select"))))
    updatePickerInput(
      session = session,
      inputId = "select_city",
      label = "城市",
      options = list(
        style = "btn-success",
        title = "请选择城市",
        size = 10
      ),
      choices = city_select,
      selected = city_select[1]
    )
  })
  
  observeEvent(input$confirmed, {
    withProgress(message = "加载中。。。",
                 value = 0.2,
                 detail = paste('百度迁徙数据爬取中。。。'),
                 {
                   
                   date_range <- seq.Date(from = input$select_date[1], to = input$select_date[2], by = 'day')
                   
                   
                   df_mobility <- mobility_date(input$select_city, input$select_direct, format(date_range, format = '%Y%m%d')) %>% 
                     mutate(value = value / 100)
                   
                   if(length(date_range) != 1){
                     df_history <- his_mobility(input$select_city, input$select_direct) %>% 
                       filter(date >= date_range[1] & date <= date_range[2]) %>% 
                       mutate(date = format(date, format = '%Y%m%d'))
                   } else {
                     df_history <- his_mobility(input$select_city, input$select_direct) %>% 
                       filter(date == date_range) %>% 
                       mutate(date = format(date, format = '%Y%m%d'))
                   }
                   incProgress(1/10, detail = paste('百度迁徙数据爬取成功'))
                   incProgress(0, detail = paste('百度迁徙数据合并中。。'))
                   # print(df_history)
                   df_combind <- df_mobility %>% 
                     full_join(df_history, by = c('date' = 'date')) %>% 
                     group_by(date) %>% 
                     mutate(value = value.x * value.y,
                            percent = value/sum(value, na.rm = T)) %>%
                     ungroup() %>% 
                     select(!c(value.x, value.y, value)) %>% 
                     pivot_wider(names_from = date, values_from = percent) %>% 
                     mutate(total = rowSums(.[-c(1:2)], na.rm = T),
                            total_per = total/sum(total, na.rm = T)) %>% 
                     select(city_name, province_name, total_per) %>% 
                     arrange(desc(total_per))
                   incProgress(1/10, detail = paste('百度迁徙数据合并成功'))
                   incProgress(0, detail = paste('溢出风险计算中。。'))
                   
                   # plot bar ----------------------------------------------------------------
                   
                   
                   df_plot <- df_combind %>% 
                     head(30)
                   
                   df_plot$city_name <- factor(df_plot$city_name, 
                                               levels = unique(df_plot$city_name)[order(df_plot$total_per, decreasing = F)])
                   df_plot$total_per <- round(df_plot$total_per, 3)
                   output$risk_plot <- renderPlotly({
                     fig <- plot_ly(
                       df_plot, y= ~city_name, x = ~total_per*100, type = 'bar', orientation = 'h'
                     ) %>% 
                       add_text(y= ~city_name, x = ~total_per*100, text=~total_per, textposition="right") %>% 
                       layout(
                         showlegend = F, 
                         xaxis = list(title = '溢出风险(%)', showline= T, linewidth=2, linecolor='black',
                                      range = c(0, (max(df_plot$total_per) + 0.1)*100)), 
                         yaxis = list(title ="", showline= T, linewidth=2, linecolor='black')
                       ) 
                     fig
                   })
                   incProgress(1/10, detail = paste('溢出风险计算成功'))
                   incProgress(0, detail = paste('高德地图地理编码中。。'))
                   
                   # plot map ----------------------------------------------------------------
                   
                   df_map <- data.frame(
                     geo = sapply(df_combind$city_name, gaodemap, simplify = T)  ## 查询api
                   ) %>% 
                     separate(col = geo, into = c('address', 'lng', 'lat'), sep = ',') ## 分割function的结果
                   
                   if(length(which(df_map$lng == 'NULL')) == 0){
                     incProgress(1/10, detail = paste('经纬度第一次查询成功'))
                   } else {
                     ## 查缺补漏
                     for (x in which(df_map$lng == 'NULL')) {
                       address <- gsub("\\（.*\\）","",df_map$address[x])
                       address <- gsub("\\(.*\\)","",address)
                       address <- gsub("市辖区","",address)
                       address <- gsub("建设兵团","新疆生产建设兵团",address)
                       url <- paste0(
                         "https://restapi.amap.com/v3/geocode/geo?address=", address,
                         "&output=JSON&key=", '11eb5fc7a625d45cf34172a043eda0c3'
                       )
                       temp_geo <- jsonlite::fromJSON(paste(readLines(url,warn = F, encoding = 'UTF-8'), collapse = ""))
                       status <- temp_geo$status
                       if (status == 1 & length(temp_geo$geocodes) != 0){
                         temp <- data.frame(V1 = temp_geo$geocodes$location) %>% 
                           separate(V1, c("lng","lat"), "[,]")
                         df_map[x,'lng'] = as.numeric(temp$lng)
                         df_map[x,'lat'] = as.numeric(temp$lat)
                       }
                     }
                     incProgress(1/10, detail = paste('经纬度第二次查询成功'))
                   }
                   
                   
                   incProgress(0, detail = paste('地理编码数据整理中。。'))
                   
                   start_point <- gaodemap(adcode[adcode$code == input$select_city,2])%>% 
                     str_split(",")
                   # print(start_point)
                   df_map$lng_start <- as.numeric(start_point[[1]][2])
                   df_map$lat_start <- as.numeric(start_point[[1]][3])
                   df_map$value <- df_combind$total_per
                   df_map$province <- df_combind$province_name
                   
                   df_map[which(df_map$lng == 'NULL'),'lng'] <- as.numeric(start_point[[1]][2])
                   df_map[which(df_map$lng == 'NULL'),'lat'] <- as.numeric(start_point[[1]][3])
                   
                   df_map$lng <- as.numeric(df_map$lng)
                   df_map$lat <- as.numeric(df_map$lat)
                   
                   data_ready_plot=data.frame()
                   for(i in c(1:nrow(df_map))){
                     tmp=data_for_connection(df_map$lng_start[i], df_map$lat_start[i], 
                                             df_map$lng[i], df_map$lat[i] , i)
                     tmp$province=df_map$province[i]
                     tmp$n=df_map$value[i]
                     data_ready_plot=rbind(data_ready_plot, tmp)
                   }
                   data_ready_plot$province <- as.factor(data_ready_plot$province)
                   
                   incProgress(1/10, detail = paste('地理编码数据整理成功'))
                   incProgress(0, detail = paste('地图绘图准备中。。'))
                   
                   # print(data_ready_plot)
                   colourCount = length(unique(df_map$province))
                   
                   
                   
                   DF <- hot_to_r(input$datatable)
                   print(DF)
                   # DF <- data.frame(
                   #   地图省份 = map_data$NAME,
                   #    数量 = sample(x = 1:50, size = 34, replace = TRUE)
                   # )
                   names(DF) <- c('NAME', 'value')
                   # print(DF$value)
                   # if(length(unique(DF$value)) < 5){
                   #   DF$value <- cut(DF$value, breaks = unique(DF$value))
                   # } else {
                   #   DF$value <- cut(DF$value, breaks = 5)
                   # }
                   # print(DF)
                   # print(DF)

                   sf_data <- map_data %>%
                     left_join(
                       DF
                     )

                   sf_df <- df_map %>%
                     st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
                     st_transform(crs = st_crs(map_data))%>%
                     cbind(st_coordinates(.))

                   sf_line <- data_ready_plot %>%
                     st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
                     st_transform(crs = st_crs(map_data))%>%
                     cbind(st_coordinates(.))

                   incProgress(1/10, detail = paste('地图绘图准备完成'))
                   incProgress(0, detail = paste('地图绘图中。。'))

                   output$map_plot <- renderPlot({
                     ggplot() +
                       ## 填色
                       geom_sf(data = sf_data, aes(fill = as.factor(value)), show.legend = F)+
                       geom_sf(data = border_data, color = '#7c0a02')+
                       ## 加点
                       geom_point(data = sf_df, aes(x=X, y=Y, colour = province, size=value))+
                       ## 加线
                       geom_line(data = sf_line, aes(x=X, y=Y, group=group,
                                                     alpha = 1, colour = province, size=0.1)) +
                       scale_fill_manual(values = colorRampPalette(brewer.pal(12, "Paired"))(colourCount),
                                         na.value = "Gray78") +
                       annotation_north_arrow(location = "bl", which_north = "true",
                                              pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
                                              style = north_arrow_fancy_orienteering) +
                       theme_void() +
                       theme(
                         legend.position="none",
                         panel.background = element_rect(fill = "white", colour = "white"),
                         panel.spacing=unit(c(0,0,0,0), "null"),
                         plot.margin=grid::unit(c(0,0,0,0), "cm"),
                       )+
                       coord_sf(expand = F)
                   })
                   incProgress(1/10, detail = paste('服务器处理完成'))
                   
                 })
  })
  
  
  
}